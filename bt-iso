#!/bin/bash -e
# Copyright (c) 2011-2021 TurnKey GNU/Linux - http://www.turnkeylinux.org
# 
# This file is part of buildtasks.
# 
# Buildtasks is free software; you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by the
# Free Software Foundation; either version 3 of the License, or (at your
# option) any later version.


fatal() { echo "FATAL [$(basename $0)]: $@" 1>&2; exit 1; }
warning() { echo "WARNING [$(basename $0)]: $@"; }
info() { echo "INFO [$(basename $0)]: $@"; }

usage() {
cat<<EOF
Syntax: $(basename $0) [ --publish ] appname
Builds appliance appname (e.g., core) ISO

Arguments::

    appname             - e.g., core

Options::

    --publish           - publish iso, release files and tklbam profile

Environment::

    BT_DEBUG            - turn on debugging
EOF
exit 1
}

ARGS="$@"

while [ "$1" != "" ]; do
    case $1 in
        --help|-h )    usage;;
        --publish)     publish="yes";;
        *)             if [ -n "$appname" ]; then usage; else appname=$1; fi ;;
    esac
    shift
done

[ -n "$appname" ] || usage
[ -n "$BT_DEBUG" ] && set -x

export BT=$(dirname $(readlink -f $0))
export BT_CONFIG=$BT/config
. $BT_CONFIG/common.cfg

if [ "$publish" == "yes" ]; then
    [ -n "$BT_PUBLISH_IMGS" ] || fatal "BT_PUBLISH_IMGS not set"
    [ -n "$BT_PUBLISH_META" ] || fatal "BT_PUBLISH_META not set"
    [ -n "$BT_PUBLISH_PROFILES" ] || fatal "BT_PUBLISH_PROFILES not set"
else
    warning "--publish was not specified"
fi

clone_or_pull() {
    # If $dir doesn't exist, clone $repo. If it does, update from origin master
    dir=$1
    repo=$2
    [[ -n "$dir" ]] && [[ -n "$repo" ]] \
        || fatal "One or more empty values passed to function: $FUNCNAME."
    if [ ! -e $dir ]; then
        info "Attempting to clone repo $repo to $dir."
        cd $(dirname $dir)
        git clone https://github.com/$repo $dir
        cd $dir
    else
        info "Repo $repo found, attempting to update"
        cd $dir
        git pull origin master
    fi
}

get_version() {
    pkg=$1
    sp="[[:space:]]"
    pkg_info=$(dpkg -l \
        | sed -En "s|^ii.*($pkg)$sp*([0-9a-z\.-:]*)$sp*amd64$sp*.*|\1 \2|p")
    echo $pkg_info | cut -d' ' -f2
}

install_pkg() {
    _pkg=$1
    _url=$2
    wget -O /tmp/$_pkg $_url/$_pkg
    apt install /tmp/$_pkg
    rm -rf /tmp/$_pkg
}

git_unshallow() {
    local dir=$1
    local branch=$2
    # assume TKL remote is 'origin'
    local remote=origin
    cd $dir
    if [[ "$(git symbolic-ref --short HEAD)" != "$branch" ]]; then
        git remote set-branches origin '*'
        git fetch origin --unshallow 2>/dev/null || git fetch origin
        git checkout $branch || git checkout $branch-dev
    fi
    cd -
}

cd $BT
COMMIT_ID=$(git rev-parse --short HEAD)
# Leverage tkldev-setup to ensure important repos are cloned and at latest
# commit; also ensures RELEASE & ARCH are set.
tkldev-setup $appname \
        || warning "tkldev-setup failed. Attempting to continue anyway."

# if TKL version doesn't match host, check out the relevant branches and
# attempt to download the right bootstrap; otherwise build it
TKL_HOST_VER=$(turnkey-version -t | cut -d. -f1)
TKL_BUILD_VER=$(sed -nE "1s|turnkey-[a-z0-9-]*-([0-9]+).*|\1|p" \
    $BT_PRODUCTS/$appname/changelog)
if [[ "$TKL_HOST_VER" != "$TKL_BUILD_VER" ]]; then
    warning "Host TKL version ($TKL_HOST_VER) does not match guest version" \
       " ($TKL_BUILD_VER)"
    case $TKL_BUILD_VER in
        16)
            TKL_CODENAME=buster;;
        17)
            TKL_CODENAME=bullseye;;
        18)
            TKL_CODENAME=bookworm;;
        19)
            TKL_CODENAME=trixie;;
        *)
            fatal "Unrecognised TKL version: $TKL_BUILD_VER";;
    esac
    git_unshallow "/turnkey/buildtasks" "$TKL_BUILD_VER.x"
    # if buildtasks has changed, restart bt-iso
    cd $BT
    if [[ "$(git rev-parse --short HEAD)" != "$COMMIT_ID" ]]; then
        exec ./$(basename $0) $ARGS
    fi
    cd -
    git_unshallow "$FAB_PATH/common" "$TKL_BUILD_VER.x"
    KEY=$FAB_PATH/common/keys/tkl-$TKL_CODENAME-images.asc
    IMAGES="http://mirror.turnkeylinux.org/turnkeylinux/images"
    BOOTSTRAP_NAME="bootstrap-$TKL_CODENAME-$(dpkg --print-architecture)"
    BOOTSTRAP_PATH="$FAB_PATH/bootstraps/$TKL_CODENAME"

    if [[ ! -d "$BOOTSTRAP_PATH" ]]; then
        info "Attempting to download $BOOTSTRAP_NAME"
        mkdir -p $(dirname $BOOTSTRAP_PATH)
        cd $(dirname $BOOTSTRAP_PATH)
        exit_code=0
        wget -nc $IMAGES/bootstrap/$BOOTSTRAP_NAME.tar.gz || exit_code=$?
        wget -nc $IMAGES/bootstrap/$BOOTSTRAP_NAME.tar.gz.hash || exit_code=$?
        if [[ "$exit_code" -eq 0 ]]; then
            info "verifying $BOOTSTRAP_NAME"
            TMP_KEYRING="$(mktemp -d)/tmp.gpg"
            GPG="gpg --no-default-keyring --keyring $TMP_KEYRING"
            $GPG --import $FAB_PATH/common/keys/tkl-$TKL_CODENAME-images.asc
            $GPG --verify $BOOTSTRAP_NAME.tar.gz.hash

            info "unpacking $BOOTSTRAP_NAME"
            mkdir $BOOTSTRAP_PATH
            tar -zxf $BOOTSTRAP_NAME.tar.gz -C $BOOTSTRAP_PATH
            cd -
        else
            warning "Downloading bootstrap failed."
            info "Attempting to build bootstrap."
            unset PUBLISH
            BOOTSTRAP_SRC=$(dirname $FAB_PATH)/bootstrap
            [[ "$publish" != "yes" ]] || PUBLISH="--publish"
            export RELEASE=debian/$TKL_CODENAME
            $BT/bt-bootstrap $PUBLISH --no-clean --force \
                || fatal "Building bootstrap failed... :("
            rsync --delete -Hac $BOOTSTRAP_SRC/build/bootstrap/ \
                $FAB_PATH/bootstraps/$CODENAME/
            # create symlinks so bin/generate-buildenv completes successfully
            ln -s $BT_BUILDS/bootstrap/$BOOTSTRAP_NAME.tar.gz \
                $(dirname $BOOTSTRAP_PATH)/$BOOTSTRAP_NAME.tar.gz
            ln -s $BT_BUILDS/bootstrap/$BOOTSTRAP_NAME.tar.gz.hash \
                $(dirname $BOOTSTRAP_PATH)/$BOOTSTRAP_NAME.tar.gz.hash
        fi
    fi
fi

info "Preperation done. Building appliance $appname."
cd $BT_PRODUCTS/$appname
deck -D build/root.sandbox || true
make clean || true
make || true

if [ ! -e build/product.iso ]; then
    if [ -z "$BT_DEBUG" ]; then
        deck -D build/root.sandbox >/dev/null 2>&1 || true
        make clean >/dev/null 2>&1 || true
    fi
    fatal "Build failed..."
fi

mkdir -p $BT_ISOS
$BT/bin/iso-release --force $BT_ISOS

if [ "$publish" == "yes" ]; then
    name=$(cat build/root.sandbox/etc/turnkey_version)
    $BT/bin/iso-publish $BT_ISOS/$name.iso
fi

if [ -z "$BT_DEBUG" ]; then
    deck -D build/root.sandbox
    make clean
fi
