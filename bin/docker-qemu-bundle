#!/bin/bash -e
# Author: Yannick Heneault yheneaul@gmail.com
# 
# This file is part of buildtasks.
# 
# Buildtasks is free software; you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by the
# Free Software Foundation; either version 3 of the License, or (at your
# option) any later version.


fatal() { echo "FATAL [$(basename $0)]: $@" 1>&2; exit 1; }
info() { echo "INFO [$(basename $0)]: $@"; }

usage() {
cat<<EOF
Syntax: $0 qcow2 dockername [port...portN]
Bundles qcow2 into an docker image

Arguments::

    qcow2           - qcow2 filesystem generated by bt-prepqemu
    dockername      - name of docker image
    port...portN    - ports to expose

Environment

    BT_DOCKER_NAME  - used in maintainer field
    BT_DOCKER_MAIL  - used in maintainer field
EOF
exit 1
}

if [[ "$#" -lt "2" ]]; then
    usage
fi

qcow2=$1; shift
dockername=$1; shift
ports=$@
name=$(echo $qcow2 | sed 's/.qcow2//')

[ -n "$BT_DOCKER_NAME" ] || fatal "BT_DOCKER_NAME not set"
[ -n "$BT_DOCKER_MAIL" ] || fatal "BT_DOCKER_MAIL not set"

info "generating Dockerfile"
mkdir $name.docker
cp $BT_QEMU/*$qcow2* $name.docker
cat > $name.docker/Dockerfile <<EOF
FROM debian:bullseye-slim
MAINTAINER $BT_DOCKER_NAME <$BT_DOCKER_MAIL>
RUN apt update
RUN apt install -y qemu-system-arm
RUN mkdir /app
COPY $qcow2 /app
COPY vmlinuz-$qcow2 /app/vmlinuz
COPY initrd.img-$qcow2 /app/initrd.img
WORKDIR /app
CMD ["qemu-system-aarch64", "-kernel", "vmlinuz", "-initrd", "initrd.img", "-m", "1024", \
     "-M", "virt", "-cpu", "cortex-a72", "-serial", "mon:stdio", \
     "-append", "rw root=LABEL=RASPIROOT net.ifnames=0 console=ttyAMA0 rootwait", \
     "-drive", "file=$qcow2,if=sd,id=hd-root", "-device", "virtio-blk-device,drive=hd-root", \
     "-netdev", "user,id=net0,hostfwd=tcp::22-:22", "-device", "virtio-net-device,netdev=net0", \
     "-no-reboot", "-nographic", \
     "-virtfs", "local,path=/mnt,mount_tag=hostmnt,security_model=passthrough,id=hostmnt"]
EXPOSE $ports
VOLUME /mnt
EOF

info "building new docker image"
docker build -t $dockername $name.docker

if [ -z "$BT_DEBUG" ]; then
    info "removing directory"
    rm -rf $name.docker
fi

