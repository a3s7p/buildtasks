#!/bin/bash -e
# Copyright (c) 2016-2023 TurnKey GNU/Linux - https://www.turnkeylinux.org
# 
# This file is part of buildtasks.
# 
# Buildtasks is free software; you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by the
# Free Software Foundation; either version 3 of the License, or (at your
# option) any later version.

fatal() { echo "FATAL [$(basename $0)]: $@" 1>&2; exit 1; }
warning() { echo "WARNING [$(basename $0)]: $@"; }
info() { echo "INFO [$(basename $0)]: $@"; }

usage() {
    cat<<EOF
Syntax: $(basename $0) target target-args
Print build environment related to target build type

Targets::

    bootstrap   path/to/bootstrap_src_dir
    iso         appname
    img         appname
    vm          path/to/iso.hash
    ec2         path/to/iso.hash
    xen         path/to/iso.hash
    docker      path/to/iso.hash
    container   path/to/iso.hash
    openstack   path/to/iso.hash

EOF
    exit 1
}

BT=$(dirname $(dirname $(readlink -f $0)))
BT_CONFIG=$BT/config
. $BT/config/common.cfg

[[ -z "$RELEASE" ]] || CODENAME=$(basename $RELEASE)
[[ -n "$CODENAME" ]] || CODENAME=$(lsb_release -s -c)
[[ -n "$ARCH" ]] || ARCH=$(dpkg --print-architecture)
[[ -n "$TKL_PUB" ]] || TKL_PUB=/turnkey/public

_git_state() {
    dir=$1
    if [[ -d "$dir" ]]; then
        cd $dir
        commit=$(git rev-parse --short HEAD)
        branch=$(git rev-parse --abbrev-ref HEAD)
        status=$(git status --porcelain | tr '\n' ' ')
        echo "$dir $commit $branch $status"
    else
        echo "$dir - NOT FOUND"
    fi
}

_py_check() {
    local py_ex=$1
    local py_ver=$2
    local lib=$3
    local py_path="$(which $py_ex || true)"
    if [[ "$py_ver" -eq 2 ]]; then
        echo "$lib (py2) $($py_ex -c "import $lib; print $lib.__version__" 2>/dev/null || echo "(none)")"
    elif [[ "$py_ver" -eq 3 ]]; then
        echo "$lib (py3) $($py_ex -c "import $lib; print($lib.__version__)" 2>/dev/null || echo "(none)")"
    else
        fatal "Python version (py_ver) must be 2 or 3 (got $py_ver)"
    fi
}

_common() {
    _git_state $BT
    echo "turnkey_version $(cat /etc/turnkey_version)"
    if which ec2metadata >/dev/null; then
        amd_id=$(timeout --signal=SIGINT 5 ec2metadata --ami-id 2>/dev/null \
            || echo "timed out after 5 sec - is there ec2metadata to read?")
        echo "ami-id $amd_id"
    else
        echo "ami-id unknown - ec2metadata not installed"
    fi
    local py_ver=''
    if which python >/dev/null; then
        py_ver=$(python --version 2>&1 | sed -En "s|.*[[:space:]]([2-3])\..*|\1|p")
    fi
    for lib in awscli boto boto3; do
        if [[ -n "$py_ver" ]]; then
            _py_check python $py_ver $lib
        fi
        if which python2 >/dev/null; then
            _py_check python2 2 $lib
        fi
        if which python3 >/dev/null; then
            _py_check python3 3 $lib
        fi
    done
}

_optimized() {
    # get sha from hash file (supports yet-to-be signed iso hash files)
    hashpath=$1
    hash256=$(grep -A 1 -m 1 sha256sum $hashpath | tail -n 1 | sed "s/^ *//" | cut -d" " -f1)
    echo "$(basename $hashpath) $hash256"

    echo "tklpatch $(dpkg -s tklpatch | grep Version | cut -d ' ' -f 2)"
}

bt_bootstrap() {
    _git_state $1
}

bt_iso() {
    appname=$1

    _git_state $FAB_PATH/common
    _git_state $FAB_PATH/cdroots
    _git_state $BT_PRODUCTS/core
    _git_state $BT_PRODUCTS/$appname
    _git_state $TKL_PUB/clicksnap
    _git_state $TKL_PUB/tkldev-docker
    _git_state $BT_PROFILES

    bootstrap_hash=$FAB_PATH/bootstraps/bootstrap-$CODENAME-$ARCH.tar.gz.hash
    bootstrap_hash_md5=$(md5sum $bootstrap_hash | cut -d " " -f 1)
    echo "$(basename $bootstrap_hash) $bootstrap_hash_md5"

    echo "fab $(fab --version)"
    echo "deck $(deck --version)"
    if which podman >/dev/null; then
        echo "$(podman --version)"
    else
        echo "podman (NOT FOUND)"
    fi
}

bt_img() {
    appname=$1

    _git_state $FAB_PATH/common
    _git_state $BT_PRODUCTS/core
    _git_state $BT_PRODUCTS/$appname
    _git_state $BT_PROFILES

    bootstrap_hash=$FAB_PATH/bootstraps/bootstrap-$CODENAME-$ARCH.tar.gz.hash
    bootstrap_hash_md5=$(md5sum $bootstrap_hash | cut -d " " -f 1)
    echo "$(basename $bootstrap_hash) $bootstrap_hash_md5"

    echo "fab $(fab --version)"
    echo "deck $(deck --version)"
}

bt_ec2() {
    for pkg in awscli python-boto python-boto3 python3-boto python3-boto3; do
        result=$(dpkg-query -W $pkg 2>/dev/null) || result=''
        if [[ -n "$result" ]]; then
            if [[ $(wc -w <<<"$result") -eq 2 ]]; then
                echo "$result"
            elif [[ $(wc -w <<<"$result") -eq 1 ]]; then
                echo -e "$result\t(none)"
            fi
        else
            echo -e "$pkg\t(not found)"
        fi
    done
}

bt_vm() {
    echo "ovftool $(ovftool --version)"
    echo "qemu-img $(qemu-img --version)"
}

bt_docker() {
    echo "docker $(docker --version)"
}

if [[ "$#" != "2" ]]; then
    usage
fi

target=$1
case $target in
    bootstrap)  _common; bt_bootstrap $2;;
    iso)        _common; bt_iso $2;;
    img)        _common; bt_img $2;;
    ec2)        _common; _optimized $2; bt_ec2;;
    vm)         _common; _optimized $2; bt_vm;;
    docker)     _common; _optimized $2; bt_docker;;
    container)  _common; _optimized $2;;
    openstack)  _common; _optimized $2;;
    xen)        _common; _optimized $2;;
    *)          fatal "unrecognized build target";;
esac
